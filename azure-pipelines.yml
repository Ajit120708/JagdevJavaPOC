trigger:
  - main
resources:
  - repo: self
variables:
  dockerRegistryServiceConnection: 02222d21-2469-4570-bb44-9b4a2ff025b9
  imageRepository: dockerspringbootpocnew
  containerRegistry: myacr001.azurecr.io
  dockerfilePath: $(Build.SourcesDirectory)/Dockerfile
  tag: $(Build.BuildId)
  vmImageName: ubuntu-latest
stages:
  - stage: Build
    displayName: Build and push stage
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: Maven@4
            inputs:
              mavenPomFile: pom.xml
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              javaHomeOption: JDKVersion
              mavenVersionOption: Default
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              command: buildAndPush
              repository: $(imageRepository)
              dockerfile: $(dockerfilePath)
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)
          - task: PublishPipelineArtifact@1
            inputs:
              artifactName: manifests
              path: manifests
      - stage: Deploy
        displayName: Deploy to AKS from ACR
        dependsOn: Build
        jobs:
          - deployment: Deploy
            displayName: Deploy job
            pool:
              vmImage: $(vmImageName)
            environment: myenv.aksnamespace
            strategy:
              runOnce:
                deploy:
                  steps:
                    - task: DownloadPipelineArtifact@2
                      inputs:
                        artifactName: manifests
                        downloadPath: $(System.ArtifactsDirectory)/manifests
                    - task: KubernetesManifest@1
                      displayName: Create imagePullSecret
                      inputs:
                        action: createSecret
                        connectionType: kubernetesServiceConnection
                        kubernetesServiceConnection: myapp-default
                        secretType: dockerRegistry
                        secretName: $(imagePullSecret)
                        dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
                    - task: KubernetesManifest@1
                      displayName: Deploy to Kubernetes cluster
                      inputs:
                        action: deploy
                        connectionType: kubernetesServiceConnection
                        kubernetesServiceConnection: myapp-default
                        manifests: |
                          $(Pipeline.Workspace)/manifests/aks-deploy-from-acr.yaml
                        containers: '$(containerRegistry)/$(imageRepository):$(tag)'
                        imagePullSecrets: $(imagePullSecret)
